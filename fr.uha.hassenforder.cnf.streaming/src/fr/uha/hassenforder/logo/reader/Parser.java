
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20240325
// Mon Jun 02 10:25:05 CEST 2025
//----------------------------------------------------

package fr.uha.hassenforder.logo.reader;

import fr.uha.hassenforder.logo.ui.GraphicTurtle;
import fr.uha.hassenforder.logo.streaming.SymbolTable;

/** jh-javacup-1.3 20240325 generated parser.
  * @version Mon Jun 02 10:25:05 CEST 2025
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\012\000\002\001\002\002\000\004\000\004\002" +
    "\007\021\031\017\027\011\027\007\043\000\000" +
    "\000\000\000\000\000\007\001\006\004\004\012" +
    "\006\004\004\012\002\007\000\010\002\006\000" +
    "\010\003\002\001\007\005\015\007\001\007\001" +
    "\006\001\001\002\004\005\002"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }





    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    private GraphicTurtle turtle;
    private SymbolTable table = null;

    public SymbolTable getTable () {
		if (table == null) table = new SymbolTable ();
		return table;
    }

    public GraphicTurtle getTurtle () {
		return turtle;
    }

    public void setTurtle (GraphicTurtle turtle) {
		this.turtle = turtle;
    }




/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {
  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= command EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // definition ::= instruction __REGEXP_1__ 
          case 1:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.definition, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // instruction ::= 
          case 2:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.instruction, CUP$sym, CUP$sym);
            }

          // definition$0_many ::= 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.definition$0_many, CUP$sym, CUP$sym);
            }

          // definition$0_many ::= definition$0_many definition 
          case 4:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.definition$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
