
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20240325
// Mon Jun 02 10:25:05 CEST 2025
//----------------------------------------------------

package fr.uha.montivincent.jcupnflex.sample.calculator.reader;

import java.util.TreeMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedHashMap;

/** jh-javacup-1.3 20240325 generated parser.
  * @version Mon Jun 02 10:25:05 CEST 2025
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\072\000\002\003\003\004\001\004\003\000\001" +
    "\006\003\006\001\001\003\012\002\002\002\007" +
    "\001\007\001\007\001\007\001\005\001\005\001" +
    "\005\001\005\001\005\001\005\001\005\001\005" +
    "\001\005\001\005\001\005\001\005\001\011\000" +
    "\013\000\013\002\044\266\134\076\256\054\u0152" +
    "\u014e\u014a\146\u014a\204\110\220\210\140\u012c\102" +
    "\u0132\u012c\u011c\u0116\u0106\u0100\360\352\332\324\264" +
    "\216\046\164\u0158\u0154\044\044\u0150\u0184\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\044\001\041\004\035\020\041\004\035\020" +
    "\004\002\042\041\041\004\041\004\042\043\042" +
    "\045\042\047\042\051\042\053\002\012\042\055" +
    "\042\057\042\061\042\063\042\065\042\067\020" +
    "\041\013\016\013\037\020\043\020\045\020\047" +
    "\020\051\020\053\001\011\020\055\020\057\020" +
    "\061\020\063\020\065\020\067\016\041\010\034" +
    "\010\034\016\043\016\045\016\047\016\051\016" +
    "\053\036\014\016\055\016\057\016\061\016\063" +
    "\016\065\016\067\015\022\012\035\015\022\034" +
    "\064\014\072\034\064\014\072\044\001\015\022" +
    "\034\064\034\064\015\022\014\072\015\022\015" +
    "\022\014\072\044\001\014\072\014\072\003\066" +
    "\044\001\003\066\033\050\000\070\033\050\000" +
    "\070\044\001\003\013\033\050\033\050\003\015" +
    "\000\070\003\017\003\021\000\070\044\001\000" +
    "\070\000\070\032\040\044\001\032\040\031\060" +
    "\044\001\031\060\032\040\032\040\044\001\031" +
    "\060\031\060\030\062\044\001\030\062\027\056" +
    "\044\001\027\056\030\062\030\062\044\001\027" +
    "\056\027\056\026\042\044\001\026\042\025\046" +
    "\044\001\025\046\026\042\026\042\044\001\025" +
    "\046\025\046\024\044\044\001\024\044\023\054" +
    "\044\001\023\054\024\044\024\044\044\001\023" +
    "\054\023\054\022\052\044\001\022\052\021\036" +
    "\044\001\021\036\022\052\022\052\017\013\021" +
    "\036\021\036\017\015\044\001\017\017\017\021" +
    "\011\024\044\001\011\033\007\030\007\030\006" +
    "\026\006\026\005\032\005\032\043\010\043\010" +
    "\040\006\040\006\037\103\037\105\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\043\002\011\001\000\002\001\012\013\001" +
    "\011\014\036\013\003\022\005\016\034\037\040" +
    "\034\034\043\035\001\001\001\001\001\001\001" +
    "\001\001\001\021"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



 

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        m.append(info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private Map<String, Object> values = new LinkedHashMap<>();

    public void setValue(String compoundKey, Object value) {
        String[] parts = compoundKey.split("(?<!\\\\)\\.");
        Map<String, Object> current = values;

        for (int i = 0; i < parts.length - 1; i++) {
            String part = cleanKey(parts[i]);
            current = (Map<String, Object>) current.computeIfAbsent(part, k -> new LinkedHashMap<>());
        }

        current.put(cleanKey(parts[parts.length - 1]), value);
    }

    private String cleanKey(String raw) {
        raw = raw.trim();
        if ((raw.startsWith("\"") && raw.endsWith("\"")) || (raw.startsWith("'") && raw.endsWith("'"))) {
            raw = raw.substring(1, raw.length() - 1);
        }
        return raw.replace("\\\"", "\"");
    }

    public static String transformMultilineString(String multilineString) {
        String result = multilineString.replaceAll("(^\"\"\"|\"\"\"$)|(^'''|'''$)", "");
        result = result.replaceAll("\\\\\\n", "");
        return result.strip();
    }

    public static String toJson(Object obj) {
        return toJson(obj, 0);
    }

    private static String toJson(Object obj, int indent) {
        String indentStr = "  ".repeat(indent);
        StringBuilder sb = new StringBuilder();

        if (obj instanceof Map) {
            sb.append("{\n");
            boolean first = true;
            for (Map.Entry<?, ?> entry : ((Map<?, ?>) obj).entrySet()) {
                if (!first) sb.append(",\n");
                sb.append(indentStr).append("  \"")
                  .append(entry.getKey()).append("\": ")
                  .append(toJson(entry.getValue(), indent + 1));
                first = false;
            }
            sb.append("\n").append(indentStr).append("}");
        } else if (obj instanceof List) {
            sb.append("[\n");
            boolean first = true;
            for (Object item : (List<?>) obj) {
                if (!first) sb.append(",\n");
                sb.append(indentStr).append("  ")
                  .append(toJson(item, indent + 1));
                first = false;
            }
            sb.append("\n").append(indentStr).append("]");
        } else if (obj instanceof String) {
            String str = (String) obj;
            str = str.replace("\\", "\\\\").replace("\"", "\\\"");
            sb.append("\"").append(str).append("\"");
        } else {
            sb.append(obj);
        }

        return sb.toString();
    }



/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {
  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= command EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // array ::= __REGEXP_3__ array_elements __REGEXP_4__ 
          case 1:
            {
              List<Object> RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              List<Object> a = (List<Object>) a$.value;
  RESULT = (a == null) ? new ArrayList<>() : a;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.array, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // array_elements ::= value 
          case 2:
            {
              List<Object> RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
  RESULT = new ArrayList<>(List.of(v));  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.array_elements, v$, v$, RESULT);
            }

          // array_elements ::= array_elements __REGEXP_5__ value 
          case 3:
            {
              List<Object> RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 3);
              List<Object> a = (List<Object>) a$.value;
  a.add(v); RESULT = a;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.array_elements, a$, v$, RESULT);
            }

          // command ::= list 
          case 4:
            {
  System.out.println(toJson(parser.values));  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.command, CUP$sym, CUP$sym);
            }

          // key ::= type __REGEXP_2__ key 
          case 5:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 1);
              String k = (String) k$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 3);
              String t = (String) t$.value;
  RESULT = t + "." + k;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key, t$, k$, RESULT);
            }

          // key ::= type 
          case 6:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              String t = (String) t$.value;
  RESULT = t;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key, t$, t$, RESULT);
            }

          // keyval ::= key __REGEXP_1__ value 
          case 7:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 3);
              String k = (String) k$.value;
  parser.setValue(k, v);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.keyval, k$, v$);
            }

          // $parenthesis1 ::= keyval$0_1 EOLN 
          case 8:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // list ::= $parenthesis1$0_many keyval$0_1 
          case 9:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // type ::= FLOAT 
          case 10:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 1);
              String f = (String) f$.value;
  RESULT = f;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type, f$, f$, RESULT);
            }

          // type ::= ID 
          case 11:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
  RESULT = id;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type, id$, id$, RESULT);
            }

          // type ::= BASIC_STRING 
          case 12:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol basic$ = CUP$stack.get(CUP$size - 1);
              String basic = (String) basic$.value;
  RESULT = basic;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type, basic$, basic$, RESULT);
            }

          // type ::= INTEGER 
          case 13:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 1);
              String i = (String) i$.value;
  RESULT = i;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type, i$, i$, RESULT);
            }

          // value ::= BASIC_STRING 
          case 14:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol basic$ = CUP$stack.get(CUP$size - 1);
              String basic = (String) basic$.value;
  RESULT = parser.cleanKey(basic);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, basic$, basic$, RESULT);
            }

          // value ::= MULTILINE_STRING 
          case 15:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol multi$ = CUP$stack.get(CUP$size - 1);
              String multi = (String) multi$.value;
  RESULT = transformMultilineString(multi);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, multi$, multi$, RESULT);
            }

          // value ::= INTEGER 
          case 16:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 1);
              String i = (String) i$.value;
  RESULT = parser.cleanKey(i);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, i$, i$, RESULT);
            }

          // value ::= FLOAT 
          case 17:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 1);
              String f = (String) f$.value;
  RESULT = parser.cleanKey(f);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, f$, f$, RESULT);
            }

          // value ::= HEXA 
          case 18:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol hexa$ = CUP$stack.get(CUP$size - 1);
              String hexa = (String) hexa$.value;
  RESULT = parser.cleanKey(hexa);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, hexa$, hexa$, RESULT);
            }

          // value ::= OCTAL 
          case 19:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol octal$ = CUP$stack.get(CUP$size - 1);
              String octal = (String) octal$.value;
  RESULT = parser.cleanKey(octal);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, octal$, octal$, RESULT);
            }

          // value ::= BIN 
          case 20:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol bin$ = CUP$stack.get(CUP$size - 1);
              String bin = (String) bin$.value;
  RESULT = parser.cleanKey(bin);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, bin$, bin$, RESULT);
            }

          // value ::= BOOLEAN 
          case 21:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol bool$ = CUP$stack.get(CUP$size - 1);
              String bool = (String) bool$.value;
  RESULT = bool;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, bool$, bool$, RESULT);
            }

          // value ::= LOCALDATE 
          case 22:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol ld$ = CUP$stack.get(CUP$size - 1);
              String ld = (String) ld$.value;
  RESULT = ld;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, ld$, ld$, RESULT);
            }

          // value ::= LOCALTIME 
          case 23:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol lt$ = CUP$stack.get(CUP$size - 1);
              String lt = (String) lt$.value;
  RESULT = lt;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, lt$, lt$, RESULT);
            }

          // value ::= LOCALDATETIME 
          case 24:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol ldt$ = CUP$stack.get(CUP$size - 1);
              String ldt = (String) ldt$.value;
  RESULT = ldt;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, ldt$, ldt$, RESULT);
            }

          // value ::= array 
          case 25:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 1);
              List<Object> a = (List<Object>) a$.value;
  RESULT = a;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, a$, a$, RESULT);
            }

          // keyval$0_1 ::= 
          case 26:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.keyval$0_1, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= 
          case 27:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 28:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
