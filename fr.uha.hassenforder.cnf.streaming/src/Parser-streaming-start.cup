package fr.uha.hassenforder.logo.reader;


import fr.uha.hassenforder.logo.ui.GraphicTurtle;
import fr.uha.hassenforder.logo.streaming.SymbolTable;



parser code {:


    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    private GraphicTurtle turtle;
    private SymbolTable table = null;

    public SymbolTable getTable () {
		if (table == null) table = new SymbolTable ();
		return table;
    }

    public GraphicTurtle getTurtle () {
		return turtle;
    }

    public void setTurtle (GraphicTurtle turtle) {
		this.turtle = turtle;
    }


:}

terminal  __REGEXP_1__;

nonterminal  command, definition, instruction;



start with command;

command		::=	definition * 
			;

definition	::=	instruction __REGEXP_1__ 
			;

instruction	::=	
			;

