
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20240325
// Sun Jun 08 00:58:53 CEST 2025
//----------------------------------------------------

package fr.uha.montivincent.jcupnflex.sample.calculator.reader;

import java.util.*;

/** jh-javacup-1.3 20240325 generated parser.
  * @version Sun Jun 08 00:58:53 CEST 2025
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\050\000\002\000\003\010\003\010\001\003\001" +
    "\016\002\004\004\005\003\012\001\012\001\013" +
    "\001\013\001\013\001\013\001\013\001\013\001" +
    "\015\000\015\002\017\000\017\002\036\332\050" +
    "\320\040\302\206\200\076\046\u011c\354\126\226" +
    "\176\146\116\066\036\270\u010c\256\052\036\142" +
    "\114\240\374\112\064\062\u0140\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\036\001\021\040\003\002\021" +
    "\040\026\010\026\027\001\007\021\040\010\025" +
    "\010\027\025\006\021\040\021\040\020\026\021" +
    "\040\020\026\021\040\035\012\034\014\020\026" +
    "\007\023\035\012\034\014\020\026\020\026\017" +
    "\036\020\026\017\036\020\026\033\050\030\063" +
    "\017\036\036\001\033\050\030\065\017\036\017" +
    "\036\016\032\017\036\016\032\017\036\027\046" +
    "\013\013\016\032\013\015\027\046\036\001\016" +
    "\032\016\032\015\034\016\032\015\034\016\032" +
    "\006\024\006\024\015\034\005\022\005\022\036" +
    "\001\015\034\015\034\014\030\015\034\014\030" +
    "\015\034\036\001\031\016\014\030\031\016\036" +
    "\001\036\001\014\030\014\030\024\004\014\030" +
    "\024\004\014\030\031\016\022\020\031\016\022" +
    "\020\031\016\036\001\004\044\024\004\004\044" +
    "\024\004\036\001\024\004\022\020\002\007\022" +
    "\020\002\011\022\020\004\044\000\042\004\044" +
    "\000\042\004\044\036\001\036\001\002\011\036" +
    "\001\002\013\036\001\002\015\000\042\036\001" +
    "\000\042\012\047\000\042\012\031\012\033\012" +
    "\035\036\001\036\001\012\037\012\041\012\043" +
    "\032\031\032\033\032\035\036\001\036\001\032" +
    "\037\032\041\032\043\023\031\023\033\023\035" +
    "\036\001\036\001\023\037\023\041\023\043\011" +
    "\031\011\033\011\035\036\001\036\001\011\037" +
    "\011\041\011\043\036\001\036\001\041\000\001" +
    "\014\001\001\001\001\034\001\021\025\023\004" +
    "\002\004\035\027\004\004\005\007\007\010\020" +
    "\020\024\004\025\022\026\033\030\022"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }




    
    public void report_error(String message, Object info) {
        System.err.println("Error" + info.toString() + " : " + message);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private static Map<String, Object> vals = new HashMap<>();
    private String currtab = null;

    public void setCurrentTable(String tableName) {
        currtab = tableName;
        vals.putIfAbsent(tableName, new HashMap<String, Object>());
    }

    public void setValue(Object name, Object value) {
        if (value instanceof Map) {
            vals.put(name.toString(), value);
        } else {
            Map<String, Object> current = vals;

            if (currtab != null) {
                current = (Map<String, Object>) vals.get(currtab);
            }

            String[] keys = name.toString().split("\\.");
            for (int i = 0; i < keys.length - 1; i++) {
                current.putIfAbsent(keys[i], new HashMap<String, Object>());
                current = (Map<String, Object>) current.get(keys[i]);
            }

            String lkey = keys[keys.length - 1];

            if (current.containsKey(lkey)) {
                Object exstVal = current.get(lkey);
                if (exstVal instanceof List<?>) {
                    ((List<Object>) exstVal).add(value);
                } else {
                    List<Object> valsList = new ArrayList<>();
                    valsList.add(exstVal);
                    valsList.add(value);
                    current.put(lkey, valsList);
                }
            } else {
                current.put(lkey, value);
            }
        }

        // Simple string representation instead of JSON
        System.out.println("NEW DATA: " + vals.toString());
    }

    public Object getValue(String name) {
        return vals.getOrDefault(name, "");
    }
    
    private Map<String, Object> globalPairs = new HashMap<>();
    private List<Object> arrValsList = new ArrayList<>();




/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {
  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= document EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // array ::= simplekey __REGEXP_1__ pairarray 
          case 1:
            {
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 3);
              Object k = (Object) k$.value;
  parser.setValue(k, parser.arrValsList);parser.arrValsList.clear();  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.array, k$, CUP$stack.get(CUP$size - 1));
            }

          // compositekey ::= simplekey __REGEXP_2__ compositekey 
          case 2:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol ck$ = CUP$stack.get(CUP$size - 1);
              Object ck = (Object) ck$.value;
              com.github.jhoenicke.javacup.runtime.Symbol sk$ = CUP$stack.get(CUP$size - 3);
              Object sk = (Object) sk$.value;
  RESULT =sk + "." + ck;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.compositekey, sk$, ck$, RESULT);
            }

          // compositekey ::= simplekey 
          case 3:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol sk$ = CUP$stack.get(CUP$size - 1);
              Object sk = (Object) sk$.value;
  RESULT = sk;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.compositekey, sk$, sk$, RESULT);
            }

          // myarrVals ::= value 
          case 4:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
 
    parser.arrValsList.add(v);
 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.myarrVals, v$, v$);
            }

          // $parenthesis1 ::= COMMA myarrVals 
          case 5:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // pairarray ::= __REGEXP_3__ value $parenthesis1$0_many __REGEXP_4__ 
          case 6:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 3);
              Object v = (Object) v$.value;
  
    parser.arrValsList.add(v);
 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.pairarray, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // pairkeyval ::= key __REGEXP_1__ value 
          case 7:
            {
              com.github.jhoenicke.javacup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              Object v = (Object) v$.value;
              com.github.jhoenicke.javacup.runtime.Symbol k$ = CUP$stack.get(CUP$size - 3);
              Object k = (Object) k$.value;
 
    parser.setValue(k.toString(), v);
    parser.globalPairs.put(k.toString(), v);
 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.pairkeyval, k$, v$);
            }

          // simplekey ::= QTDSTR 
          case 8:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol qs$ = CUP$stack.get(CUP$size - 1);
              String qs = (String) qs$.value;
  RESULT = qs;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.simplekey, qs$, qs$, RESULT);
            }

          // simplekey ::= UNQTDSTR 
          case 9:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol us$ = CUP$stack.get(CUP$size - 1);
              String us = (String) us$.value;
  RESULT = us;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.simplekey, us$, us$, RESULT);
            }

          // value ::= QTDSTR 
          case 10:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol qs$ = CUP$stack.get(CUP$size - 1);
              String qs = (String) qs$.value;
  RESULT = qs;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, qs$, qs$, RESULT);
            }

          // value ::= BOOLEAN 
          case 11:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol b$ = CUP$stack.get(CUP$size - 1);
              Boolean b = (Boolean) b$.value;
  RESULT = b;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, b$, b$, RESULT);
            }

          // value ::= INTEGER 
          case 12:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 1);
              Integer i = (Integer) i$.value;
  RESULT = i;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, i$, i$, RESULT);
            }

          // value ::= DOUBLE 
          case 13:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol d$ = CUP$stack.get(CUP$size - 1);
              Float d = (Float) d$.value;
  RESULT = d;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, d$, d$, RESULT);
            }

          // value ::= DATE 
          case 14:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol d$ = CUP$stack.get(CUP$size - 1);
              String d = (String) d$.value;
  RESULT = d;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, d$, d$, RESULT);
            }

          // value ::= TIME 
          case 15:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              String t = (String) t$.value;
  RESULT = t;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.value, t$, t$, RESULT);
            }

          // input$0_many ::= 
          case 16:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.input$0_many, CUP$sym, CUP$sym);
            }

          // input$0_many ::= input$0_many input 
          case 17:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.input$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis1$0_many ::= 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 19:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
