package fr.uha.montivincent.jcupnflex.sample.calculator.reader;


import java.util.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;



parser code {:

    
    public void report_error(String message, Object info) {
        System.err.println("Error" + info.toString() + " : " + message);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private static Map<String, Object> vals = new HashMap<>();
    private String currtab = null;
    private Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public void setCurrentTable(String tableName) {
        currtab = tableName;
        vals.putIfAbsent(tableName, new HashMap<String, Object>());
    }

    public void setValue(Object name, Object value) {
    if (value instanceof Map) {
        vals.put(name.toString(), value);
    } else {
        Map<String, Object> current = vals;

        if (currtab != null) {
            current = (Map<String, Object>) vals.get(currtab);
        }

        String[] keys = name.toString().split("\\.");
        for (int i = 0; i < keys.length - 1; i++) {
            current.putIfAbsent(keys[i], new HashMap<String, Object>());
            current = (Map<String, Object>) current.get(keys[i]);
        }

        String lkey = keys[keys.length - 1];

        if (current.containsKey(lkey)) {
            Object exstVal = current.get(lkey);
            if (exstVal instanceof List<?>) {
                ((List<Object>) exstVal).add(value);
            } else {
                List<Object> valsList = new ArrayList<>();
                valsList.add(exstVal);
                valsList.add(value);
                current.put(lkey, valsList);
            }
        } else {
            current.put(lkey, value);
        }
    }

    System.out.println("NEW JSON :\n" + gson.toJson(vals));
}


    public Object getValue(String name) {
        return vals.getOrDefault(name, "");
    }
    
private Map<String, Object> globalPairs = new HashMap<>();
private List<Object> arrValsList = new ArrayList<>();


:}

terminal  EOLN, __REGEXP_1__, __REGEXP_2__, __REGEXP_3__, __REGEXP_4__;
terminal Boolean BOOLEAN;
terminal Float DOUBLE;
terminal Integer INTEGER;
terminal String COMMA, COMMENT, DATE, QTDSTR, TIME, UNQTDSTR;

nonterminal  array, document, input, myarrVals, pairarray, pairkeyval, tab, tpair;
nonterminal Object compositekey, key, simplekey, value;



start with document;

array			::=	simplekey:k __REGEXP_1__ pairarray {:  parser.setValue(k, parser.arrValsList);parser.arrValsList.clear();  :} 
				;

compositekey	::=	simplekey:sk __REGEXP_2__ compositekey:ck {:  RESULT =sk + "." + ck;  :} 
				|	simplekey:sk {:  RESULT = sk;  :} 
				;

document		::=	input * 
				;

input			::=	pairkeyval 
				|	tab 
				|	array 
				|	COMMENT 
				|	EOLN 
				;

key				::=	simplekey 
				|	compositekey 
				;

myarrVals		::=	value:v {: 
parser.arrValsList.add(v);
 :} 
				;

pairarray		::=	__REGEXP_3__ value:v ( COMMA myarrVals  ) * __REGEXP_4__ {:  
parser.arrValsList.add(v);
 :} 
				;

pairkeyval		::=	key:k __REGEXP_1__ value:v {: 
    parser.setValue(k.toString(), v);
    parser.globalPairs.put(k.toString(), v);

 :} 
				;

simplekey		::=	QTDSTR:qs {:  RESULT = qs;  :} 
				|	UNQTDSTR:us {:  RESULT = us;  :} 
				;

value			::=	QTDSTR:qs {:  RESULT = qs;  :} 
				|	BOOLEAN:b {:  RESULT = b;  :} 
				|	INTEGER:i {:  RESULT = i;  :} 
				|	DOUBLE:d {:  RESULT = d;  :} 
				|	DATE:d {:  RESULT = d;  :} 
				|	TIME:t {:  RESULT = t;  :} 
				;

